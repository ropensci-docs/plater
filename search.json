[{"path":"https://docs.ropensci.org/plater/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"how-plater-helps-you","dir":"Articles","previous_headings":"","what":"How plater helps you","title":"Getting started with `plater`","text":"plater makes easy work data experiments performed plates. Many scientific instruments (plate readers qPCR machines) produce data tabular form mimics microtiter plate: cell corresponds well physically laid plate. experiments like , ’s often easiest keep records (control vs. treatment, concentration, sample type, etc.) similar plate layout form. plate-shaped data easy think , ’s easy analyze. point plater seamlessly convert plate-shaped data (easy think ) tidy data (easy analyze). defining simple, systematic format storing information plate layouts. painlessly rearranges data intuitive format tidy data frame. just two steps: Put data file plater format Read data plater functions","code":""},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"the-example","dir":"Articles","previous_headings":"","what":"The example","title":"Getting started with `plater`","text":"Imagine ’ve invented two new antibiotics. show well work, filled 96-well plate dilutions antibiotics mixed four different types bacteria. , measured many bacteria got killed. well plate know: drug (B) concentration drug (100 uM 0.01 nM drug) bacterial species (E. coli, S. enterocolitis, C. trachomatis, N. gonorrhoeae) amount killing well first three items variables chose setting experiment. fourth item measured.","code":""},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"step-1-put-the-data-in-plater-format","dir":"Articles","previous_headings":"","what":"Step 1: Put the data in plater format","title":"Getting started with `plater`","text":"first step create file experiment. plater format designed store information experiment one file. ’s simply .csv file representing single plate, containing one plate layouts. layout maps variable, example experiment, four layouts file: Drug, Concentration, Bacteria, Killing. plater format file example experiment came package. Load plater (.e. run library(plater)) run system.file(\"extdata\", package = \"plater\"). Open folder listed open example-1.csv spreadsheet editor. abbreviated version file shown : format pretty simple: .csv file Top left cell layout name rest top row layout column numbers (1:12 96-well plate) rest left column row names (:H 96-well plate) One line layouts (row appear blank spreadsheet editor, row commas viewed plain text.) can use plater format standard plate size (6 1536 wells). every well filled. well blank every layout file, ’s omitted. ’s blank others, ’ll get NA ’s blank. creating file plater format, can helpful check whether ’re right. purpose, can pass path file check_plater_format(), check format correct diagnose problems.","code":""},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"step-2-read-in-the-data","dir":"Articles","previous_headings":"","what":"Step 2: Read in the data","title":"Getting started with `plater`","text":"Now file set , ’re ready read data. analyze experiment two different ways illustrate two common data analysis scenarios: Assuming instrument gives back killing data shaped like plate, ’ll create one file four variables read read_plate(). Assuming instrument gives back tidy data (one-well-per-row), ’ll create two files–one data one three variables–combine files add_plate().","code":""},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"step-2-read-a-single-plater-format-file-with-read_plate","dir":"Articles","previous_headings":"Step 2: Read in the data","what":"Step 2: Read a single plater format file with read_plate()","title":"Getting started with `plater`","text":"works. (Note use system.file() get file path example file, files specify file path without using system.file()). happened? read_plate() read plater format file created turned layout column, using name layout specified file. four columns: Drug, Concentration, Bacteria, Killing. additionally creates column named “Wells” well identifiers well. Now, well represented single row, values indicated file column.","code":"file_path <- system.file(\"extdata\", \"example-1.csv\", package = \"plater\")     data <- read_plate(       file = file_path,             # full path to the .csv file       well_ids_column = \"Wells\",    # name to give column of well IDs (optional)       sep = \",\"                     # separator used in the csv file (optional) ) str(data) #> Classes 'tbl_df', 'tbl' and 'data.frame':    96 obs. of  5 variables: #>  $ Wells        : chr  \"A01\" \"A02\" \"A03\" \"A04\" ... #>  $ Drug         : chr  \"A\" \"A\" \"A\" \"A\" ... #>  $ Concentration: num  1.00e+02 2.00e+01 4.00 8.00e-01 1.60e-01 3.20e-02 6.40e-03 1.28e-03 2.56e-04 5.12e-05 ... #>  $ Bacteria     : chr  \"E. coli\" \"E. coli\" \"E. coli\" \"E. coli\" ... #>  $ Killing      : num  98 95 92 41 17 2 1.5 1.8 1 0.5 ...  head(data) #>   Wells Drug Concentration Bacteria Killing #> 1   A01    A       100.000  E. coli      98 #> 2   A02    A        20.000  E. coli      95 #> 3   A03    A         4.000  E. coli      92 #> 4   A04    A         0.800  E. coli      41 #> 5   A05    A         0.160  E. coli      17 #> 6   A06    A         0.032  E. coli       2"},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"step-2-again-combine-a-one-well-per-row-file-and-a-plater-format-file-with-add_plate","dir":"Articles","previous_headings":"Step 2: Read in the data","what":"Step 2 (again): Combine a one-well-per-row file and a plater format file with add_plate()","title":"Getting started with `plater`","text":"previous example, assumed killing data provided instrument plate-shaped form, just pasted plater format file. Sometimes, though, ’ll get data back formatted one well per row. add_plate() set help situation. provide tidy data frame including well IDs provide plater format file information add_plate() knits together well--well. ’s example using two files installed along plater. add_plate makes easy store data mix formats, cases tidy cases plate-shaped, reality many experiments.","code":"file2A <- system.file(\"extdata\", \"example-2-part-A.csv\", package = \"plater\") data2 <- read.csv(file2A)  str(data2) #> 'data.frame':    96 obs. of  2 variables: #>  $ Wells  : chr  \"A01\" \"A02\" \"A03\" \"A04\" ... #>  $ Killing: num  98 95 92 41 17 2 1.5 1.8 1 0.5 ...  head(data2) #>   Wells Killing #> 1   A01      98 #> 2   A02      95 #> 3   A03      92 #> 4   A04      41 #> 5   A05      17 #> 6   A06       2  meta <- system.file(\"extdata\", \"example-2-part-B.csv\", package = \"plater\") data2 <- add_plate(       data = data2,               # data frame to add to        file = meta,                # full path to the .csv file       well_ids_column = \"Wells\",   # name of column of well IDs in data frame       sep = \",\"                   # separator used in the csv file (optional) )  str(data2) #> tibble [96 × 5] (S3: tbl_df/tbl/data.frame) #>  $ Wells        : chr [1:96] \"A01\" \"A02\" \"A03\" \"A04\" ... #>  $ Killing      : num [1:96] 98 95 92 41 17 2 1.5 1.8 1 0.5 ... #>  $ Drug         : chr [1:96] \"A\" \"A\" \"A\" \"A\" ... #>  $ Concentration: num [1:96] 1.00e+02 2.00e+01 4.00 8.00e-01 1.60e-01 3.20e-02 6.40e-03 1.28e-03 2.56e-04 5.12e-05 ... #>  $ Bacteria     : chr [1:96] \"E. coli\" \"E. coli\" \"E. coli\" \"E. coli\" ...  head(data2) #> # A tibble: 6 × 5 #>   Wells Killing Drug  Concentration Bacteria #>   <chr>   <dbl> <chr>         <dbl> <chr>    #> 1 A01        98 A           100     E. coli  #> 2 A02        95 A            20     E. coli  #> 3 A03        92 A             4     E. coli  #> 4 A04        41 A             0.8   E. coli  #> 5 A05        17 A             0.16  E. coli  #> 6 A06         2 A             0.032 E. coli"},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"multiple-plates","dir":"Articles","previous_headings":"","what":"Multiple plates","title":"Getting started with `plater`","text":"Say happy tests antibiotics, decided second experiment, testing common pathogenic bacteria. Now data two separate plates. Rather handling separately, can combine common data frame read_plates() function. Just like , create one plater file per plate, information describing experiment. case, ’ll two files, one experiment. , just read read_plates(). can specify names plate, become column output identifying plate well . default ’ll use file names.","code":"# same file as above file1 <- system.file(\"extdata\", \"example-1.csv\", package = \"plater\")  # new file file2 <- system.file(\"extdata\", \"more-bacteria.csv\", package = \"plater\")  data <- read_plates(    files = c(file1, file2),    plate_names = c(\"Experiment 1\", \"Experiment 2\"),    well_ids_column = \"Wells\", # optional    sep = \",\")                 # optional  str(data) #> tibble [192 × 6] (S3: tbl_df/tbl/data.frame) #>  $ Plate        : chr [1:192] \"Experiment 1\" \"Experiment 1\" \"Experiment 1\" \"Experiment 1\" ... #>  $ Wells        : chr [1:192] \"A01\" \"A02\" \"A03\" \"A04\" ... #>  $ Drug         : chr [1:192] \"A\" \"A\" \"A\" \"A\" ... #>  $ Concentration: num [1:192] 1.00e+02 2.00e+01 4.00 8.00e-01 1.60e-01 3.20e-02 6.40e-03 1.28e-03 2.56e-04 5.12e-05 ... #>  $ Bacteria     : chr [1:192] \"E. coli\" \"E. coli\" \"E. coli\" \"E. coli\" ... #>  $ Killing      : num [1:192] 98 95 92 41 17 2 1.5 1.8 1 0.5 ...  head(data) #> # A tibble: 6 × 6 #>   Plate        Wells Drug  Concentration Bacteria Killing #>   <chr>        <chr> <chr>         <dbl> <chr>      <dbl> #> 1 Experiment 1 A01   A           100     E. coli       98 #> 2 Experiment 1 A02   A            20     E. coli       95 #> 3 Experiment 1 A03   A             4     E. coli       92 #> 4 Experiment 1 A04   A             0.8   E. coli       41 #> 5 Experiment 1 A05   A             0.16  E. coli       17 #> 6 Experiment 1 A06   A             0.032 E. coli        2"},{"path":"https://docs.ropensci.org/plater/articles/plater-basics.html","id":"viewing-plate-shaped-data","dir":"Articles","previous_headings":"","what":"Viewing plate-shaped data","title":"Getting started with `plater`","text":"Sometimes ’s useful look back data plate shape. something weird one column? contamination one corner plate? , use view_plate() takes tidy data frame displays columns plate layouts.","code":"view_plate(   data = data2,    well_ids_column = \"Wells\",    columns_to_display = c(\"Concentration\", \"Killing\") ) #> $Concentration #>     1  2 3   4    5     6      7       8        9       10        11 12 #> A 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> B 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> C 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> D 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> E 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> F 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> G 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #> H 100 20 4 0.8 0.16 0.032 0.0064 0.00128 0.000256 5.12e-05 1.024e-05  0 #>  #> $Killing #>     1   2   3   4   5   6   7   8   9  10  11  12 #> A  98  95  92  41  17   2 1.5 1.8   1 0.5 0.5 0.3 #> B  15   8   3 1.2 1.1 0.8 1.2 0.4 0.6 0.1 0.2 0.4 #> C  72  21   7 1.1 0.8 1.3 0.2 1.8   1 0.2 0.4 0.2 #> D 0.4 0.2 0.1 0.5 0.3 0.2 0.1 0.1 0.5 0.5 0.3 0.4 #> E  37   7   2 0.3 0.2 0.4 0.6 0.1   1 0.2 0.4 0.2 #> F  99  99  99  99  99  61   5 2.2 1.3 0.2 0.3 0.2 #> G  99  33   4 0.5 0.3 0.2 0.2 0.3 0.2 0.2 0.4 0.2 #> H  98  99  99  97  98  99  98  97  65  22   8 0.5"},{"path":"https://docs.ropensci.org/plater/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Hughes. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/plater/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sean M. Hughes (2016). plater: Read,  Tidy,  Display Data Microtiter Plates. Journal Open Source Software, 1(7). doi:10.21105/joss.00106","code":"@Article{,   doi = {10.21105/joss.00106},   url = {http://dx.doi.org/10.21105/joss.00106},   year = {2016},   month = {nov},   publisher = {The Open Journal},   volume = {1},   number = {7},   author = {Sean M Hughes},   title = {plater: Read,  Tidy,  and Display Data from Microtiter Plates},   journal = {The Journal of Open Source Software}, }"},{"path":"https://docs.ropensci.org/plater/index.html","id":"plater","dir":"","previous_headings":"","what":"Read, Tidy, and Display Data from Microtiter Plates","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"plater makes easy work data experiments performed plates. aimed scientists analysts deal microtiter plate-based instruments.","code":""},{"path":"https://docs.ropensci.org/plater/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"plater available CRAN. Just run:","code":"install.packages(\"plater\")"},{"path":"https://docs.ropensci.org/plater/index.html","id":"getting-your-data-in","dir":"","previous_headings":"","what":"Getting your data in","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"Many scientific instruments (plate readers qPCR machines) produce data tabular form mimics microtiter plate: cell corresponds well physically laid plate. experiments like , ’s often easiest keep records (control vs. treatment, concentration, sample type, etc.) similar plate layout form. data dimensions aren’t ideal analysis. ’s read_plate() add_plate() come . read_plate() takes data plate layout form converts data frame, one well per row, identified well name. add_plate() thing, merges new columns existing data frame provide. words, functions seamlessly convert plate-shaped data (easy think ) tidy data (easy analyze). make even easier, multiple plates experiment, use read_plates() read combine single data frame.","code":""},{"path":"https://docs.ropensci.org/plater/index.html","id":"seeing-your-data","dir":"","previous_headings":"","what":"Seeing your data","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"Sometimes ’s useful map data back onto plate (weird outliers corner plate?). , ’s view_plate(), takes data frame one well per row, lays like ’s plate.","code":""},{"path":"https://docs.ropensci.org/plater/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"detailed example use plater, check vignette.","code":""},{"path":"https://docs.ropensci.org/plater/index.html","id":"contributing-to-plater","dir":"","previous_headings":"","what":"Contributing to plater","title":"Read, Tidy, and Display Data from Microtiter Plates","text":"plater developed Contributor Code Conduct. contribute development, must agree abide terms. Pull requests changes accepted gratitude. Please include tests appropriate pull requests. Requests new features reports bugs security vulnerabilities can made emailed address listed .","code":""},{"path":"https://docs.ropensci.org/plater/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"plater R [@R] package makes easy work data experiments performed microtiter plates. Many scientific instruments (plate readers qPCR machines) produce data tabular form mimics microtiter plate: cell corresponds well physically laid plate. experiments like , ’s often easiest keep records (control vs. treatment, concentration, sample type, etc.) similar plate layout form. plater defines simple, plate-shaped file format data storage, ’s easy remember experimental design, provides functions seamlessly convert format tidy [@tidy] data frame ’s optimal analysis. instrument produces data ’s already tidy, plater helps combine data plate-shaped experimental metadata. data tidy, ’s sometimes useful look back plate shape, plater makes easy, .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"Converts data plater format data frame one well per row merges existing data frame well name.","code":""},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"","code":"add_plate(data, file, well_ids_column, sep = \",\")"},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"data data frame merge file . Must contain column well names. file path .csv file formatted described read_plate. well_ids_column name column data containing well IDs. sep character used separate columns file (e.g. \",\" \";\") Defaults \",\".","code":""},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"Returns data tibble many new columns plates file. Empty wells indicated NA.","code":""},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"data contains wells file, NA added merged column(s) wells. file contains wells data, wells added bottom result NA columns data.","code":""},{"path":"https://docs.ropensci.org/plater/reference/add_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a plater-formatted file and combine it with an existing data frame. — add_plate","text":"","code":"# Part of the data is tidy file <- system.file(\"extdata\", \"example-2-part-A.csv\", package = \"plater\") data <- read.csv(file)  # Part of the data is plate-shaped plate_shaped <- system.file(\"extdata\", \"example-2-part-B.csv\", package = \"plater\")  # Combine the two data <- add_plate(    data = data,     file = plate_shaped,    well_ids_column = \"Wells\")  # Now data are tidy head(data) #> # A tibble: 6 × 5 #>   Wells Killing Drug  Concentration Bacteria #>   <chr>   <dbl> <chr>         <dbl> <chr>    #> 1 A01        98 A           100     E. coli  #> 2 A02        95 A            20     E. coli  #> 3 A03        92 A             4     E. coli  #> 4 A04        41 A             0.8   E. coli  #> 5 A05        17 A             0.16  E. coli  #> 6 A06         2 A             0.032 E. coli"},{"path":"https://docs.ropensci.org/plater/reference/check_plater_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a file is in plater format. — check_plater_format","title":"Check whether a file is in plater format. — check_plater_format","text":"Runs provided file number diagnostics determine whether valid plater format file displays information deficiencies found.","code":""},{"path":"https://docs.ropensci.org/plater/reference/check_plater_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a file is in plater format. — check_plater_format","text":"","code":"check_plater_format(file, sep = \",\")"},{"path":"https://docs.ropensci.org/plater/reference/check_plater_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a file is in plater format. — check_plater_format","text":"file path file check. sep character used separate columns file (e.g. \",\" \";\"). Defaults \",\".","code":""},{"path":"https://docs.ropensci.org/plater/reference/check_plater_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a file is in plater format. — check_plater_format","text":"Displays number messages checks file. stop descriptive error message file formatted correctly.","code":""},{"path":"https://docs.ropensci.org/plater/reference/check_plater_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a file is in plater format. — check_plater_format","text":"","code":"file_path <- system.file(\"extdata\", \"example-1.csv\", package = \"plater\")  data <- check_plater_format(file_path) #> * Checking file path ...  #> good! #> * Checking that file is not empty ...  #> good! #> * Checking valid column labels ...  #> good! #> * Checking file length and number of plate layouts ...  #> good! #> * Checking plate dimensions and row labels ...  #> good! #> Success!"},{"path":"https://docs.ropensci.org/plater/reference/plater-package.html","id":null,"dir":"Reference","previous_headings":"","what":"plater: Read, Tidy, and Display Data from Microtiter Plates — plater-package","title":"plater: Read, Tidy, and Display Data from Microtiter Plates — plater-package","text":"Tools interacting data experiments done microtiter plates. Easily read plate-shaped data convert tidy format, combine plate-shaped data tidy data, view tidy data plate shape. plater defines simple, plate-shaped file format data storage, easy remember experimental design. package provides functions seamlessly convert format tidy data frame optimal analysis. check_plater_format provided help manage plate-shaped files.  can work purely plate-shaped data (read_plate read_plates), well combination plate-shaped data tidy data (add_plate). allows easy plate-shaped visualization tidy data (view_plate).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/plater/reference/plater-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plater: Read, Tidy, and Display Data from Microtiter Plates — plater-package","text":"Maintainer: Sean Hughes smhughes@uw.edu (ORCID)","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"Converts data plater format data frame one well per row identified well name.","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"","code":"read_plate(file, well_ids_column = \"Wells\", sep = \",\")"},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"file path .csv file formatted described . well_ids_column name give column contain well identifiers. Default \"Wells\". sep character used separate columns file (e.g. \",\" \";\"). Defaults \",\".","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"Returns data frame well row. One column named well_ids_column contain well names (A01, A02..). many additional columns layouts file. Empty wells omitted.","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"plater-format","dir":"Reference","previous_headings":"","what":"plater format","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":".csv file formatted microtiter plate. top-left cell contains name use column representing plate. example, 96-well plate, subsequent wells top row labeled 1-12. subsequent cells first column labeled -H. : example, cells within plate contain well IDs (\"A01\", \"A02\"), may contain arbitrary characters: numbers, letters, punctuation. cell may also blank. Note Microsoft Excel sometimes include cells appear blank .csv files produces, files may spurious columns rows outside plate, causing errors. solve problem, copy paste just cells within plate fresh worksheet save .","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"multiple-columns","dir":"Reference","previous_headings":"","what":"Multiple columns","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"Multiple columns information plate can included single file. first plate, leave one row blank, add another plate formatted described . (\"blank\" row appear blank spreadsheet editor, row commas viewed plain text.) many plates necessary can included single file (e.g. data measured, subject, treatment, replicate, etc.).","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a plater-formatted file and turn it into a tidy data frame. — read_plate","text":"","code":"file_path <- system.file(\"extdata\", \"example-1.csv\", package = \"plater\")  # Data are stored in plate-shaped form data <- read_plate(    file = file_path,    well_ids_column = \"Wells\")  # Now data are tidy head(data) #> # A tibble: 6 × 5 #>   Wells Drug  Concentration Bacteria Killing #>   <chr> <chr>         <dbl> <chr>      <dbl> #> 1 A01   A           100     E. coli       98 #> 2 A02   A            20     E. coli       95 #> 3 A03   A             4     E. coli       92 #> 4 A04   A             0.8   E. coli       41 #> 5 A05   A             0.16  E. coli       17 #> 6 A06   A             0.032 E. coli        2"},{"path":"https://docs.ropensci.org/plater/reference/read_plates.html","id":null,"dir":"Reference","previous_headings":"","what":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","title":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","text":"wrapper around read_plate handles multiple plates combines single data frame.","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","text":"","code":"read_plates(files, plate_names = NULL, well_ids_column = \"Wells\", sep = \",\")"},{"path":"https://docs.ropensci.org/plater/reference/read_plates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","text":"files character vector paths one plater-formatted .csv files. plate_names character vector length files names give individual plates resulting data frame. Defaults file names (stripped path .csv). well_ids_column name give column contain well identifiers. Default \"Wells\". sep character used separate columns file (e.g. \",\" \";\"). Defaults \",\".","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","text":"Returns data frame like returned read_plate, containing data plates. plates identified column called \"Plate\" containing names given plate_names.","code":""},{"path":"https://docs.ropensci.org/plater/reference/read_plates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read multiple plater-formatted files and combine result into one data frame. — read_plates","text":"","code":"# Combine multiple files into one tidy data frame file1 <- system.file(\"extdata\", \"example-1.csv\", package = \"plater\") file2 <- system.file(\"extdata\", \"more-bacteria.csv\", package = \"plater\")  # Data are stored in plate-shaped form data <- read_plates(    files = c(file1, file2),    plate_names = c(\"Experiment 1\", \"Experiment 2\"),    well_ids_column = \"Wells\")  # Data from both plates are tidy and in the same data frame head(data) #> # A tibble: 6 × 6 #>   Plate        Wells Drug  Concentration Bacteria Killing #>   <chr>        <chr> <chr>         <dbl> <chr>      <dbl> #> 1 Experiment 1 A01   A           100     E. coli       98 #> 2 Experiment 1 A02   A            20     E. coli       95 #> 3 Experiment 1 A03   A             4     E. coli       92 #> 4 Experiment 1 A04   A             0.8   E. coli       41 #> 5 Experiment 1 A05   A             0.16  E. coli       17 #> 6 Experiment 1 A06   A             0.032 E. coli        2"},{"path":"https://docs.ropensci.org/plater/reference/view_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays the data in the form of a microtiter plate. — view_plate","title":"Displays the data in the form of a microtiter plate. — view_plate","text":"Displays data form microtiter plate.","code":""},{"path":"https://docs.ropensci.org/plater/reference/view_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays the data in the form of a microtiter plate. — view_plate","text":"","code":"view_plate(data, well_ids_column, columns_to_display, plate_size = 96)"},{"path":"https://docs.ropensci.org/plater/reference/view_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays the data in the form of a microtiter plate. — view_plate","text":"data data frame containing data well_ids_column name column data containing well IDs. columns_to_display vector names one columns like display. plate_size number wells plate. Must 6, 12, 24, 48, 96 384, 1536. Default 96.","code":""},{"path":"https://docs.ropensci.org/plater/reference/view_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays the data in the form of a microtiter plate. — view_plate","text":"depiction data columns_to_display though laid microtiter plate plate_size wells.","code":""},{"path":"https://docs.ropensci.org/plater/reference/view_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displays the data in the form of a microtiter plate. — view_plate","text":"","code":"# Generate some tidy data data <- data.frame(Wells = paste0(LETTERS[1:3], 0, rep(1:4, each = 3)),  Species = rep(c(\"Alien\", \"Human\", \"Cat\"), 4),  OxygenProduction = round(rnorm(12), 3)) head(data) #>   Wells Species OxygenProduction #> 1   A01   Alien           -1.400 #> 2   B01   Human            0.255 #> 3   C01     Cat           -2.437 #> 4   A02   Alien           -0.006 #> 5   B02   Human            0.622 #> 6   C02     Cat            1.148  # See which wells had cells from which species and the amount of oxygen  # produced for each well view_plate(data, \"Wells\", c(\"Species\", \"OxygenProduction\"), 12) #> $Species #>       1     2     3     4 #> A Alien Alien Alien Alien #> B Human Human Human Human #> C   Cat   Cat   Cat   Cat #>  #> $OxygenProduction #>        1      2      3      4 #> A   -1.4 -0.006 -1.822 -0.283 #> B  0.255  0.622 -0.247 -0.554 #> C -2.437  1.148 -0.244  0.629 #>"},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-105","dir":"Changelog","previous_headings":"","what":"plater 1.0.5","title":"plater 1.0.5","text":"Add package plater.R per CRAN request. Thanks Maëlle Salmon @maelle","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-104","dir":"Changelog","previous_headings":"","what":"plater 1.0.4","title":"plater 1.0.4","text":"CRAN release: 2022-02-11 Add option allow non-comma delimiters (#27). Thanks Yorgos Bos @superpuffin","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-103","dir":"Changelog","previous_headings":"","what":"plater 1.0.3","title":"plater 1.0.3","text":"CRAN release: 2021-01-06 Change add_plate() return tibble rather trying preserve initial class Remove use deprecated select_ function","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-102","dir":"Changelog","previous_headings":"","what":"plater 1.0.2","title":"plater 1.0.2","text":"CRAN release: 2020-03-24 Changes tests comply new CRAN policy data.frame(..., stringsAsFactors = FALSE) Add support 6- 1536-well plates Change behavior add_plate plate layout contains wells input data frame, wells appended end data frame instead erroring.","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-101","dir":"Changelog","previous_headings":"","what":"plater 1.0.1","title":"plater 1.0.1","text":"CRAN release: 2017-06-26 Eliminate warnings readLines files without EOF (Mac issue) Fix issue numeric formatting mixed numeric/character layouts Fix issue grouped tibbles view_plate","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-100-5-oct-2016","dir":"Changelog","previous_headings":"","what":"plater 1.0.0 (5 Oct 2016)","title":"plater 1.0.0 (5 Oct 2016)","text":"CRAN release: 2016-10-06 Changes response rOpenSci reviewers Reorder arguments add_plate() better pipelining add check_plater_format() help preparing files rename lowercase","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-021","dir":"Changelog","previous_headings":"","what":"plateR 0.2.1","title":"plateR 0.2.1","text":"Reorganize parameters consistency Add defaults parameters Add read_plates()","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-02","dir":"Changelog","previous_headings":"","what":"plateR 0.2","title":"plateR 0.2","text":"Introduce new data format multiple plate layouts per .csv file (replacing multiple files )","code":""},{"path":"https://docs.ropensci.org/plater/news/index.html","id":"plater-01","dir":"Changelog","previous_headings":"","what":"plateR 0.1","title":"plateR 0.1","text":"Add support reading multiple files ","code":""}]
